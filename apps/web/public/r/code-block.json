{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-block",
  "type": "registry:component",
  "title": "Code Block",
  "description": "Code Block",
  "dependencies": [
    "shiki",
    "@shikijs/transformers",
    "@icons-pack/react-simple-icons"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/code-block/code-block.tsx",
      "content": "\"use client\";\n\nimport {\n  SiCss,\n  SiHtml5,\n  SiJavascript,\n  SiTypescript,\n  SiYaml,\n} from \"@icons-pack/react-simple-icons\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@radix-ui/react-tabs\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { Button } from \"@workspace/ui/components/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@workspace/ui/components/select\";\nimport { cn } from \"@workspace/ui/lib/utils\";\nimport { Check, Copy, Terminal } from \"lucide-react\";\nimport * as React from \"react\";\nimport {\n  createContext,\n  Dispatch,\n  ReactNode,\n  use,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\n\n// Icons mapping\nconst icons = {\n  ts: SiTypescript,\n  tsx: SiTypescript,\n  js: SiJavascript,\n  jsx: SiJavascript,\n  css: SiCss,\n  html: SiHtml5,\n  yml: SiYaml,\n  sh: Terminal,\n} as const;\n\n// Variants\nconst codeBlockTitleVariants = cva(\n  \"flex items-center gap-2 text-sm rounded px-2 py-1 outline-none transition-colors text-nowrap truncate max-w-50\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"aria-selected:bg-muted hover:bg-muted/50 aria-selected:outline-none\",\n      },\n      size: {\n        default: \"text-sm px-2 py-1\",\n        sm: \"text-xs px-1.5 py-0.5\",\n        lg: \"text-base px-3 py-1.5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nconst copyButtonVariants = cva(\n  \"relative size-4 text-muted-foreground absolute top-1/2 -translate-y-1/2 left-1/2 -translate-x-1/2 transition duration-300\",\n  {\n    variants: {\n      state: {\n        idle: \"opacity-100 scale-100\",\n        copied: \"opacity-0 scale-50\",\n      },\n    },\n    defaultVariants: {\n      state: \"idle\",\n    },\n  }\n);\n\n// Types\nexport type CodeBlockItem = {\n  id: string;\n  code: string;\n  html: string;\n  title?: string;\n  lang: string;\n  group?: string;\n};\n\ntype CodeBlockContextType = {\n  currentId: string;\n  setCurrentId: (id: string) => void;\n  codes: CodeBlockItem[];\n  groups?: string[];\n  currentGroup?: string;\n};\n\n// Contexts\nconst CodeBlockContext = createContext<CodeBlockContextType>({\n  currentId: \"\",\n  setCurrentId: () => {},\n  codes: [],\n  currentGroup: \"\",\n});\n\nconst CodeBlockGroupContext = createContext({\n  activeGroups: [] as string[],\n  setActiveGroups: (() => {}) as Dispatch<React.SetStateAction<string[]>>,\n});\n\n// Group Provider\nfunction CodeBlockGroupProvider({\n  children,\n  defaultActiveGroups = [],\n}: {\n  children: ReactNode;\n  defaultActiveGroups?: string[];\n}) {\n  const [activeGroups, setActiveGroups] =\n    useState<string[]>(defaultActiveGroups);\n\n  useEffect(() => {\n    const groups = localStorage.getItem(\"code-block-groups\");\n    if (groups) {\n      try {\n        setActiveGroups(JSON.parse(groups));\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (defaultActiveGroups.length > 0) {\n      // localStorageに値がない場合のみdefaultを使用\n      setActiveGroups(defaultActiveGroups);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // defaultActiveGroupsは初期値なので依存配列に含めない\n\n  useEffect(() => {\n    if (activeGroups.length > 0) {\n      localStorage.setItem(\"code-block-groups\", JSON.stringify(activeGroups));\n    } else {\n      localStorage.removeItem(\"code-block-groups\");\n    }\n  }, [activeGroups]);\n\n  const contextValue = React.useMemo(\n    () => ({\n      activeGroups,\n      setActiveGroups,\n    }),\n    [activeGroups]\n  );\n\n  return (\n    <CodeBlockGroupContext value={contextValue}>\n      {children}\n    </CodeBlockGroupContext>\n  );\n}\n\n// Hooks\nconst useCodeBlockGroup = () => use(CodeBlockGroupContext);\nconst useCodeBlock = () => use(CodeBlockContext);\n\n// Block Provider (Internal use only)\nfunction CodeBlockProvider({\n  children,\n  initialId,\n  codes,\n  groups = [],\n}: {\n  children: ReactNode;\n  initialId: string;\n  groups?: string[];\n  codes: CodeBlockItem[];\n}) {\n  const [currentId, _setCurrentId] = useState<string>(initialId);\n  const { activeGroups } = useCodeBlockGroup();\n  const currentGroup = useMemo(() => {\n    return groups.find((group) => activeGroups.includes(group)) || groups[0];\n  }, [groups, activeGroups]);\n\n  const setCurrentId = useCallback((id: string) => {\n    _setCurrentId(id);\n  }, []);\n\n  // グループが切り替わったときに、そのグループの最初のタブに切り替える\n  useEffect(() => {\n    if (currentGroup && codes.length > 0) {\n      // 現在のグループに属する最初のコードのインデックスを見つける\n      const firstCodeIndexInGroup = codes.findIndex(\n        (code) => code.group === currentGroup\n      );\n\n      if (firstCodeIndexInGroup !== -1) {\n        const newId = `${currentGroup}-${firstCodeIndexInGroup}`;\n        _setCurrentId(newId);\n      }\n    }\n  }, [currentGroup, codes]);\n\n  const contextValue = React.useMemo<CodeBlockContextType>(\n    () => ({\n      codes,\n      currentId,\n      setCurrentId,\n      groups,\n      currentGroup,\n    }),\n    [codes, currentId, setCurrentId, groups, currentGroup]\n  );\n\n  return (\n    <CodeBlockContext value={contextValue}>\n      <Tabs value={currentId} onValueChange={setCurrentId}>\n        {children}\n      </Tabs>\n    </CodeBlockContext>\n  );\n}\n\n// UI Components\nfunction CodeCard({\n  codes,\n  groups,\n  defaultSelectedId,\n  className,\n  asChild = false,\n  children,\n  ...props\n}: {\n  codes: CodeBlockItem[];\n  groups?: string[];\n  defaultSelectedId?: string;\n} & React.ComponentProps<\"figure\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"figure\";\n\n  // 各コードアイテムにIDを割り当て\n  const codesWithId = useMemo(\n    () =>\n      codes.map((item, i) => ({\n        ...item,\n        id: item.id || (item.group ? `${item.group}-${i}` : `${i}`),\n      })),\n    [codes]\n  );\n\n  // initialIdを自動生成\n  const firstItem = codesWithId[0];\n  const autoInitialId = firstItem?.group\n    ? `${firstItem.group}-0`\n    : firstItem\n      ? `0`\n      : \"\";\n  const initialId = defaultSelectedId ?? autoInitialId;\n\n  if (!firstItem) {\n    return (\n      <Comp\n        data-code-block=\"card\"\n        data-slot=\"code-block-card\"\n        className={cn(\"border rounded-lg overflow-hidden\", className)}\n        {...props}\n      >\n        <p className=\"p-4 text-muted-foreground\">No codes available</p>\n      </Comp>\n    );\n  }\n\n  return (\n    <CodeBlockProvider\n      initialId={initialId}\n      codes={codesWithId}\n      groups={groups}\n    >\n      <Comp\n        data-code-block=\"card\"\n        data-slot=\"code-block-card\"\n        className={cn(\"border rounded-lg overflow-hidden\", className)}\n        {...props}\n      >\n        {children}\n      </Comp>\n    </CodeBlockProvider>\n  );\n}\n\nfunction CodeCardHeader({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"figcaption\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"figcaption\";\n\n  return (\n    <Comp\n      data-code-block=\"header\"\n      data-slot=\"code-block-header\"\n      className={cn(\n        \"flex gap-2 h-12 text-sm text-muted-foreground items-center px-2 border-b not-prose\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CodeTabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsList>) {\n  return (\n    <TabsList\n      data-code-block=\"tabs-list\"\n      data-slot=\"code-block-tabs-list\"\n      className={cn(\"flex gap-1 overflow-auto\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CodeDisplay({\n  html,\n  className,\n  ...props\n}: { html: string } & React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-code-block=\"display\"\n      data-slot=\"code-block-display\"\n      className={cn(\n        \"not-prose\",\n        \"*:border-none *:focus-visible:outline-none *:p-0! *:m-0 text-sm\",\n        \"overflow-auto\",\n        \"[&_code]:py-3 [&_code]:flex [&_code]:flex-col [&_code]:w-fit\",\n        \"[&_.line]:px-4 [&_.line]:leading-relaxed [&_.line]:py-px\",\n        \"[&_.highlighted]:bg-muted\",\n        className\n      )}\n      dangerouslySetInnerHTML={{ __html: html }}\n      {...props}\n    />\n  );\n}\n\nfunction CodeTitle({\n  id,\n  lang,\n  title,\n  group,\n  variant = \"default\",\n  size = \"default\",\n  className,\n  ...props\n}: {\n  id: string;\n  lang: string;\n  title?: string;\n  group?: string;\n} & VariantProps<typeof codeBlockTitleVariants> &\n  Omit<React.ComponentProps<typeof TabsTrigger>, \"value\">) {\n  const Icon = icons[lang as keyof typeof icons];\n  const resolvedTitle = title || (lang === \"sh\" ? \"ターミナル\" : lang);\n\n  const { activeGroups } = useCodeBlockGroup();\n  const { groups } = useCodeBlock();\n  const hasActiveGroups = activeGroups.length > 0;\n\n  if (group) {\n    if (hasActiveGroups && !activeGroups.includes(group)) {\n      return null;\n    }\n    // fallback\n    if (!hasActiveGroups && groups && groups[0] !== group) {\n      return null;\n    }\n  }\n\n  return (\n    <TabsTrigger\n      data-code-block=\"title\"\n      data-slot=\"code-block-title\"\n      data-group={group}\n      value={id}\n      title={resolvedTitle}\n      className={cn(\n        codeBlockTitleVariants({ variant, size }),\n        \"only:bg-transparent!\",\n        className\n      )}\n      {...props}\n    >\n      {Icon && <Icon className=\"size-3.5\" />}\n      <span>{resolvedTitle}</span>\n    </TabsTrigger>\n  );\n}\n\nfunction CodeContent({\n  id,\n  className,\n  ...props\n}: { id: string } & Omit<React.ComponentProps<typeof TabsContent>, \"value\">) {\n  return (\n    <TabsContent\n      data-code-block=\"content\"\n      data-slot=\"code-block-content\"\n      value={id}\n      className={cn(className)}\n      {...props}\n    />\n  );\n}\n\nfunction CopyCodeButton({\n  className,\n  ...props\n}: Omit<React.ComponentProps<typeof Button>, \"onClick\">) {\n  const { currentId, codes } = useCodeBlock();\n  const [isCopied, setIsCopied] = useState(false);\n\n  const handleCopy = useCallback(() => {\n    const code = codes.find((code) => code.id === currentId)?.code;\n    /**\n     * Removes shiki transformer notation lines from code.\n     * @link https://shiki.style/packages/transformers\n     */\n    const cleanCode = code?.replace(/\\s*\\/\\/\\s*\\[!.*$/gm, \"\");\n\n    if (!cleanCode) return;\n\n    navigator.clipboard.writeText(cleanCode);\n    setIsCopied(true);\n    setTimeout(() => {\n      setIsCopied(false);\n    }, 2000);\n  }, [currentId, codes]);\n\n  return (\n    <Button\n      data-code-block=\"copy-button\"\n      data-slot=\"code-block-copy-button\"\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={handleCopy}\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <Copy\n        className={cn(\n          copyButtonVariants({ state: isCopied ? \"copied\" : \"idle\" })\n        )}\n      />\n      <Check\n        className={cn(\n          copyButtonVariants({ state: isCopied ? \"idle\" : \"copied\" })\n        )}\n      />\n      <span className=\"sr-only\">Copy Code</span>\n    </Button>\n  );\n}\n\nfunction CodeBlockGroupSelector({\n  groups,\n  ...props\n}: {\n  groups: string[];\n} & Omit<React.ComponentProps<typeof Select>, \"value\" | \"onValueChange\">) {\n  const { setActiveGroups } = useCodeBlockGroup();\n  const { currentGroup } = useCodeBlock();\n\n  const handleValueChange = useCallback(\n    (value: string) => {\n      localStorage.setItem(\"code-block-group\", value);\n      setActiveGroups((values) => {\n        const cleanItems = values.filter((value) => !groups.includes(value));\n        return [...cleanItems, value];\n      });\n    },\n    [groups, setActiveGroups]\n  );\n\n  return (\n    <Select value={currentGroup} onValueChange={handleValueChange} {...props}>\n      <SelectTrigger\n        data-code-block=\"group-selector-trigger\"\n        data-slot=\"code-block-group-selector-trigger\"\n        className=\"[&_span]:truncate [&_span]:max-w-20 [&_span]:block!\"\n      >\n        <SelectValue />\n      </SelectTrigger>\n      <SelectContent\n        data-code-block=\"group-selector-content\"\n        data-slot=\"code-block-group-selector-content\"\n        className=\"max-w-80\"\n        align=\"end\"\n      >\n        {groups.map((group) => (\n          <SelectItem\n            key={group}\n            value={group}\n            className=\"[&_span]:truncate [&_span]:block!\"\n          >\n            {group}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n\nexport {\n  CodeBlockGroupProvider,\n  CodeCard,\n  CodeCardHeader,\n  CodeTabsList,\n  CodeTitle,\n  CodeContent,\n  CodeDisplay,\n  CopyCodeButton,\n  CodeBlockGroupSelector,\n  useCodeBlock,\n  useCodeBlockGroup,\n};\n",
      "type": "registry:component"
    }
  ]
}