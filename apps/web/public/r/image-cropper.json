{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "image-cropper",
  "type": "registry:block",
  "title": "Image Cropper",
  "description": "画像のアップロード、プレビュー、クロップ機能を提供するコンポーネント群。",
  "dependencies": [
    "react-avatar-editor",
    "@types/react-avatar-editor",
    "react-dropzone"
  ],
  "registryDependencies": [
    "button",
    "slider"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/image-cropper.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { cn } from \"@/lib/utils\";\nimport { ImagePlus, X } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { useRef, useState } from \"react\";\nimport AvatarEditor from \"react-avatar-editor\";\nimport { useDropzone } from \"react-dropzone\";\n\n// ============================================================================\n// ImageCropper - クロップ UI コンポーネント\n// ============================================================================\n\ntype ImageCropperProps = {\n  /**\n   * クロップする画像ファイル\n   */\n  image: File | string;\n  /**\n   * キャンバスの横幅（ピクセル）\n   * @default 400\n   */\n  canvasWidth?: number;\n  /**\n   * 画像のアスペクト比\n   * @default 1\n   */\n  aspectRatio?: number;\n  /**\n   * クロップ後の横幅（ピクセル）\n   */\n  resultWidth: number;\n  /**\n   * クロップ完了時のコールバック\n   * @param dataUrl - JPEG形式のData URL\n   * @param blob - JPEG形式のBlob\n   */\n  onCrop?: (dataUrl: string, blob: Blob) => void;\n  /**\n   * キャンセル時のコールバック\n   */\n  onCancel?: () => void;\n};\n\nexport function ImageCropper({\n  image,\n  canvasWidth = 400,\n  aspectRatio = 1,\n  resultWidth,\n  onCrop,\n  onCancel,\n}: ImageCropperProps) {\n  const editor = useRef<AvatarEditor>(null);\n  const [scale, setScale] = useState(1.0);\n\n  const cropImage = async () => {\n    const canvas = editor.current?.getImage();\n    if (!canvas) return;\n\n    const dataUrl = canvas.toDataURL(\"image/jpeg\");\n\n    canvas.toBlob((blob) => {\n      if (blob) {\n        onCrop?.(dataUrl, blob);\n      }\n    }, \"image/jpeg\");\n  };\n\n  const canvasHeight = canvasWidth / aspectRatio;\n\n  return (\n    <div className=\"w-full\">\n      <div\n        className=\"border relative overflow-hidden rounded-lg mx-auto\"\n        style={{\n          aspectRatio,\n          maxWidth: canvasWidth,\n        }}\n      >\n        <AvatarEditor\n          className=\"absolute max-w-full max-h-full inset-0\"\n          scale={scale}\n          ref={editor}\n          width={canvasWidth}\n          height={canvasHeight}\n          image={image}\n        />\n      </div>\n\n      <div className=\"my-4\">\n        <Slider\n          max={2}\n          step={0.01}\n          min={1}\n          defaultValue={[1]}\n          onValueChange={([value]) => setScale(value ?? 1)}\n        />\n      </div>\n\n      <div className=\"flex gap-2 justify-end\">\n        {onCancel && (\n          <Button variant=\"outline\" onClick={onCancel}>\n            閉じる\n          </Button>\n        )}\n        <Button autoFocus onClick={cropImage}>\n          切り取る\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// ============================================================================\n// ImageCropperFileSelector - ファイル選択コンポーネント\n// ============================================================================\n\ntype ImageCropperFileSelectorProps = {\n  /**\n   * ファイルが選択された時のコールバック\n   */\n  onFileSelect: (file: File) => void;\n  /**\n   * 入力画像の最大サイズ（バイト）\n   * @default 4MB\n   */\n  maxSize?: number;\n  /**\n   * カスタムクラス名（width と aspect-ratio を含む）\n   */\n  className?: string;\n  /**\n   * 無効化フラグ\n   */\n  disabled?: boolean;\n  /**\n   * 子要素（プレビューなど）\n   */\n  children?: React.ReactNode;\n};\n\nexport function ImageCropperFileSelector({\n  onFileSelect,\n  maxSize = 1024 * 1024 * 4, // 4MB\n  className,\n  disabled = false,\n  children,\n}: ImageCropperFileSelectorProps) {\n  const { getRootProps, getInputProps, isDragAccept } = useDropzone({\n    maxSize,\n    multiple: false,\n    accept: {\n      \"image/jpeg\": [],\n      \"image/png\": [],\n      \"image/webp\": [],\n    },\n    useFsAccessApi: false,\n    disabled,\n    onDropAccepted: (dropped) => {\n      if (dropped[0]) {\n        onFileSelect(dropped[0]);\n      }\n    },\n  });\n\n  return (\n    <div\n      {...getRootProps()}\n      className={cn(\n        \"border rounded-md cursor-pointer relative overflow-hidden\",\n        \"focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2 focus-within:outline-none ring-offset-background\",\n        \"w-full aspect-square\", // デフォルトのサイズとアスペクト比\n        isDragAccept ? \"border-primary bg-primary/10\" : \"bg-muted/60\",\n        disabled && \"opacity-50 cursor-not-allowed\",\n        className\n      )}\n    >\n      {children || (\n        <div className=\"grid place-content-center h-full\">\n          <ImagePlus className=\"size-8 text-muted-foreground opacity-30\" />\n        </div>\n      )}\n\n      <input {...getInputProps()} />\n      <span className=\"sr-only\">画像を選択</span>\n    </div>\n  );\n}\n\n// ============================================================================\n// ImageCropperPreview - プレビュー表示コンポーネント\n// ============================================================================\n\ntype ImageCropperPreviewProps = {\n  /**\n   * プレビュー画像のURL\n   */\n  src: string;\n  /**\n   * 代替テキスト\n   */\n  alt?: string;\n  /**\n   * 削除ボタンが押された時のコールバック\n   */\n  onRemove?: () => void;\n  /**\n   * 削除ボタンを表示するか\n   * @default true\n   */\n  showRemoveButton?: boolean;\n};\n\nexport function ImageCropperPreview({\n  src,\n  alt = \"\",\n  onRemove,\n  showRemoveButton = true,\n}: ImageCropperPreviewProps) {\n  return (\n    <div className=\"relative w-full h-full\">\n      <Image unoptimized className=\"object-cover\" fill src={src} alt={alt} />\n\n      {showRemoveButton && onRemove && (\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          className=\"absolute top-2 right-2 size-8 text-muted-foreground\"\n          size=\"icon\"\n          onClick={(e) => {\n            e.stopPropagation(); // Dropzone のクリックを防ぐ\n            onRemove();\n          }}\n        >\n          <X size={20} />\n          <span className=\"sr-only\">イメージを削除</span>\n        </Button>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:block"
    }
  ]
}